   public interface IVehicleService
{
    void AddVehicle(string type, string model, int year);

    void ViewAllVehicles(int id);
    void UpdateVehicle(int id, string type, string model, int year);
    void DeleteVehicle(int id);
}

public class VehicleService : IVehicleService
{
    private readonly VehicleDbContext _dbContext;

    public VehicleService(VehicleDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    public void AddVehicle(string type, string model, int year)
    {
        var vehicle = new Vehicle
        {
            Type = type,
            Model = model,
            Year = year
        };

        _dbContext.Vehicles.Add(vehicle);
        _dbContext.SaveChanges();

        Console.WriteLine("Vehicle added successfully!");
    }

    public void ViewAllVehicles(int id)
    {
        var vehicle = _dbContext.Vehicles.Find(id);

        if (vehicle != null)
        {
            Console.WriteLine($"Type: {vehicle.Type}, Model: {vehicle.Model}, Year: {vehicle.Year}");
        }
        else
        {
            Console.WriteLine("Vehicle not found.");
        }
    }

    public void UpdateVehicle(int id, string type, string model, int year)
    {
        var vehicleToUpdate = _dbContext.Vehicles.Find(id);

        if (vehicleToUpdate != null)
        {
            vehicleToUpdate.Type = type;
            vehicleToUpdate.Model = model;
            vehicleToUpdate.Year = year;

            _dbContext.SaveChanges();
            Console.WriteLine("Vehicle updated successfully!");
        }
        else
        {
            Console.WriteLine("Vehicle not found.");
        }
    }

    public void DeleteVehicle(int id)
    {
        var vehicleToDelete = _dbContext.Vehicles.Find(id);

        if (vehicleToDelete != null)
        {
            _dbContext.Vehicles.Remove(vehicleToDelete);
            _dbContext.SaveChanges();
            Console.WriteLine("Vehicle deleted successfully!");
        }
        else
        {
            Console.WriteLine("Vehicle not found.");
        }
    }
}

public class Program
{
    private readonly IVehicleService _vehicleService;

    public Program(IVehicleService vehicleService)
    {
        _vehicleService = vehicleService;
    }

    public void Run()
    {
        Console.WriteLine("Welcome to the Vehicle Management System!");

        bool isRunning = true;
        while (isRunning)
        {
            Console.WriteLine("\nMenu:");
            Console.WriteLine("1. Add a Vehicle");
            Console.WriteLine("2. View all Vehicles");
            Console.WriteLine("3. Update Vehicles");
            Console.WriteLine("4. Delete Vehicles");
            Console.WriteLine("5. Exit");

            Console.Write("Enter your choice: ");
            int choice;
            if (int.TryParse(Console.ReadLine(), out choice))
            {
                switch (choice)
                {
                    case 1:
                        AddVehicle();
                        break;
                    case 2:
                        ViewAllVehicles();
                        break;
                    case 3:
                        UpdateVehicle();
                        break;
                    case 4:
                        DeleteVehicle();
                        break;
                    case 5:
                        isRunning = false;
                        break;
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
            }
            else
            {
                Console.WriteLine("Invalid input. Please enter a number.");
            }
        }
    }

    private void AddVehicle()
    {
        Console.WriteLine("\nEnter Vehicle details:");

        Console.Write("Enter Vehicle Type: ");
        string type = Console.ReadLine();

        Console.Write("Enter Vehicle Model: ");
        string model = Console.ReadLine();

        Console.Write("Enter Vehicle Year: ");
        int year;
        while (!int.TryParse(Console.ReadLine(), out year))
        {
            Console.WriteLine("Invalid input. Please enter a valid year.");
        }

        _vehicleService.AddVehicle(type, model, year);
    }

    private void ViewAllVehicles()
    {
        Console.Write("Enter Vehicle ID to view details: ");
        if (int.TryParse(Console.ReadLine(), out int id))
        {
            _vehicleService.ViewAllVehicles(id);
        }
        else
        {
            Console.WriteLine("Invalid input. Please enter a valid ID.");
        }
    }

    private void UpdateVehicle()
    {
        Console.Write("Enter Vehicle ID to update: ");
        if (int.TryParse(Console.ReadLine(), out int id))
        {
            Console.WriteLine("\nEnter updated Vehicle details:");

            Console.Write("Enter Vehicle Type: ");
            string type = Console.ReadLine();

            Console.Write("Enter Vehicle Model: ");
            string model = Console.ReadLine();

            Console.Write("Enter Vehicle Year: ");
            int year;
            while (!int.TryParse(Console.ReadLine(), out year))
            {
                Console.WriteLine("Invalid input. Please enter a valid year.");
            }

            _vehicleService.UpdateVehicle(id, type, model, year);
        }
        else
        {
            Console.WriteLine("Invalid input. Please enter a valid ID.");
        }
    }

    private void DeleteVehicle()
    {
        Console.Write("Enter Vehicle ID to delete: ");
        if (int.TryParse(Console.ReadLine(), out int id))
        {
            _vehicleService.DeleteVehicle(id);
        }
        else
        {
            Console.WriteLine("Invalid input. Please enter a valid ID.");
        }
    }

    static void Main(string[] args)
    {
        var dbContext = new VehicleDbContext();
        var vehicleService = new VehicleService(dbContext);
        var program = new Program(vehicleService);

        program.Run();
    }
}
